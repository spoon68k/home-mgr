#!/usr/bin/env bash
#
# scramble - AES-256-CTR encryption/decryption
#
# simple wrapper for openssl for symmetric encryption

set -e

usage() {
    echo "Usage: $(basename $0) [-d] [-p] -i <input_file> -o <output_file>"
    echo "  -i Input file  (required)"
    echo "  -o Output file (required)"
    echo "  -d Decrypt mode (optional; if omitted, encrypt mode is used)"
    echo "  -p Read passphrase from SCRAMBLE_PHRASE (optional, if omitted user will be prompted)" 
    exit 1
}

# Defaults
decrypt_mode="no"
password_prompt="yes"

while getopts ":i:o:dp" opt; do
    case "$opt" in
        i) infile="$OPTARG";;
        o) outfile="$OPTARG";;
        d) decrypt_mode="yes";;
        p) password_prompt="no";;
        *) usage;;
    esac
done

# Check required
if [[ -z "$infile" || -z "$outfile" ]]; then
    usage
fi

if [[ "$infile" = "$outfile" ]]; then
    echo "Error: Input and Output file cannot be the same"
    exit 1
fi

# Read passphrase
if [[ "$password_prompt" == "yes" ]]; then
    echo -n "Enter passphrase: "
    read -s PASS
    echo
    echo -n "Confirm passphrase: "
    read -s PASS2
    echo
    if [[ "$PASS" != "$PASS2" ]]; then
        echo "Error: Passphrases do not match."
        exit 1
    fi
else
    PASS=$SCRAMBLE_PHRASE
fi

if [[ "$PASS" == "" ]]; then
    echo "Error: Passphrase cannot be blank."
    exit 1
fi

# Encrypt/decrypt
if [[ "$decrypt_mode" == "no" ]]; then

    openssl enc -aes-256-ctr -pbkdf2 -salt -in "${infile}" -out "${outfile}.$$" -pass pass:"$PASS"
    dd if="${outfile}.$$" of="${outfile}" bs=1 skip=8 2>/dev/null
    rm -f "${outfile}.$$"
    echo "Encrypted: $infile -> $outfile"

else

    printf "Salted__" > "${infile}.$$"
    cat "${infile}" >> "${infile}.$$"
    openssl enc -d -aes-256-ctr -pbkdf2 -salt -in "${infile}.$$" -out "${outfile}" -pass pass:"$PASS"
    rm -f "${infile}.$$"
    echo "Decrypted: $infile -> $outfile"

fi

